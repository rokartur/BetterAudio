name: Build and Release macOS App

on:
  push:
    branches: [dev]

jobs:
  build:
    runs-on: macos-15
    env:
      DEVELOPMENT_TEAM_ID: N529W98U62
      SIGNING_ENABLED: ${{ secrets.SIGNING_CERTIFICATE != '' && secrets.SIGNING_PASSWORD != '' }}
    outputs:
      app_version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'

      - name: Determine app version
        id: get_version
        run: |
          set -eo pipefail
          version=$(xcodebuild -project Micmute.xcodeproj -scheme Micmute -configuration Release -showBuildSettings | awk '/MARKETING_VERSION/ {print $3; exit}')
          echo "version=$version" >> "$GITHUB_OUTPUT"

      - name: Import signing certificate
        if: ${{ env.SIGNING_ENABLED == 'true' }}
        env:
          SIGNING_CERTIFICATE: ${{ secrets.SIGNING_CERTIFICATE }}
          SIGNING_PASSWORD: ${{ secrets.SIGNING_PASSWORD }}
        run: |
          # Create temporary keychain
          security create-keychain -p temporary_password build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p temporary_password build.keychain
          security set-keychain-settings -lut 21600 build.keychain

          # Import certificate
          echo "$SIGNING_CERTIFICATE" | base64 --decode > certificate.p12
          security import certificate.p12 -k build.keychain -P "$SIGNING_PASSWORD" -T /usr/bin/codesign

          # Set key partition list
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k temporary_password build.keychain

          # Verify certificate
          security find-identity -v -p codesigning build.keychain

      - name: Build with Xcode
        env:
          SIGNING_ENABLED: ${{ env.SIGNING_ENABLED }}
          DEVELOPMENT_TEAM_ID: ${{ env.DEVELOPMENT_TEAM_ID }}
        run: |
          if [ "$SIGNING_ENABLED" = "true" ]; then
            xcodebuild clean build \
              -project Micmute.xcodeproj \
              -scheme Micmute \
              -configuration Release \
              -destination "platform=macOS" \
              DEVELOPMENT_TEAM=$DEVELOPMENT_TEAM_ID \
              CODE_SIGN_STYLE=Automatic \
              CODE_SIGN_IDENTITY="Apple Development" \
              -derivedDataPath build_output
          else
            xcodebuild clean build \
              -project Micmute.xcodeproj \
              -scheme Micmute \
              -configuration Release \
              -destination "platform=macOS" \
              CODE_SIGN_STYLE=Manual \
              CODE_SIGN_IDENTITY="" \
              CODE_SIGNING_ALLOWED=NO \
              CODE_SIGNING_REQUIRED=NO \
              DEVELOPMENT_TEAM="" \
              -derivedDataPath build_output
          fi

      - name: Archive artifact
        run: |
          cd ./build_output/Build/Products/Release
          ditto -c -k --sequesterRsrc --keepParent Micmute.app Micmute-${{ steps.get_version.outputs.version }}.zip
          mv Micmute-${{ steps.get_version.outputs.version }}.zip $GITHUB_WORKSPACE/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: Micmute-${{ steps.get_version.outputs.version }}
          path: ${{ github.workspace }}/Micmute-${{ steps.get_version.outputs.version }}.zip

  release:
    needs: build
    runs-on: macos-15
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: Micmute-${{ needs.build.outputs.app_version }}
          path: .

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.build.outputs.app_version }}
          name: v${{ needs.build.outputs.app_version }}
          files: Micmute-${{ needs.build.outputs.app_version }}.zip
          prerelease: true
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
